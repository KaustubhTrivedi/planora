spring:
  application:
    name: planora
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/planora}
    username: ${DATABASE_USERNAME:planora}
    password: ${DATABASE_PASSWORD:planora123}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    locations: classpath:db/migration
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: ${FLYWAY_VALIDATE_ON_MIGRATE:true}
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  security:
    jwt:
      secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}
      expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
      refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

logging:
  level:
    com.planora: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# External API Configuration
external:
  apis:
    openai:
      api-key: ${OPENAI_API_KEY:}
      base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
      model: ${OPENAI_MODEL:gpt-3.5-turbo}
      timeout: 30s
    
    google-maps:
      api-key: ${GOOGLE_MAPS_API_KEY:}
      base-url: ${GOOGLE_MAPS_BASE_URL:https://maps.googleapis.com/maps/api}
    
    weather:
      api-key: ${WEATHER_API_KEY:}
      base-url: ${WEATHER_BASE_URL:https://api.openweathermap.org/data/2.5}
    
    currency:
      api-key: ${CURRENCY_API_KEY:}
      base-url: ${CURRENCY_BASE_URL:https://api.exchangerate-api.com/v4}

# AWS Configuration
aws:
  s3:
    bucket-name: ${AWS_S3_BUCKET:planora-documents}
    region: ${AWS_REGION:us-east-1}
    access-key: ${AWS_ACCESS_KEY:}
    secret-key: ${AWS_SECRET_KEY:}

# Application specific configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  
  file-upload:
    max-file-size: ${MAX_FILE_SIZE:10MB}
    max-request-size: ${MAX_REQUEST_SIZE:50MB}
    allowed-types: ${ALLOWED_FILE_TYPES:pdf,jpg,jpeg,png,doc,docx,txt}
  
  rate-limiting:
    enabled: ${RATE_LIMITING_ENABLED:true}
    requests-per-minute: ${RATE_LIMIT_RPM:100}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
  
  flyway:
    enabled: true
  
  h2:
    console:
      enabled: false

logging:
  level:
    com.planora: DEBUG
    org.springframework.security: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  data:
    redis:
      host: localhost
      port: 6370

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    com.planora: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN